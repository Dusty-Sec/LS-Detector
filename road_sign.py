# -*- coding: utf-8 -*-
"""road_sign.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tWjkfcJmRNDQ5f5e2EDdoZljDKuqBuSA
"""

!unzip road_signs.zip

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
from tensorflow.keras.optimizers import RMSprop
import matplotlib.pyplot as plt
import tensorflow as tf
import numpy as np
import cv2
import os

train = ImageDataGenerator(rescale=1/255)
validation = ImageDataGenerator(rescale=1/255)

train_dataset = train.flow_from_directory('road_signs/datasets/train/',target_size=(200,200),batch_size=3,class_mode='categorical')
validation_dataset = train.flow_from_directory('road_signs/datasets/validation/',target_size=(200,200),batch_size=3,class_mode='categorical')

train_dataset.class_indices

"""MODEL DESIGNING

"""

from keras.models import Sequential
from keras.layers import Conv2D  # help in convultion img
from keras.layers import MaxPooling2D, Flatten, Dense # dense layers are hidden layers

model = Sequential()
model.add(Conv2D(16,(3,3),activation='relu',input_shape=(200,200,3)))   # 16 feature detectors , ech feature detector will be 5,5 size
model.add(MaxPooling2D((2,2)))

model.add(Conv2D(32,(3,3),activation='relu'))   # 32 feature detectors , ech feature detector will be 5,5 size
model.add(MaxPooling2D((2,2)))

model.add(Conv2D(64,(5,5),activation='relu'))   # 64 feature detectors , ech feature detector will be 5,5 size
model.add(MaxPooling2D((2,2)))

model.add(Flatten())

model.add(Dense(240,activation = 'relu'))  # 512 neuron in hidden layer

model.add(Dense(3,activation='softmax'))  # output layer. return 0 or 1 or 2

model.compile(loss='categorical_crossentropy',optimizer= 'adam',metrics=['accuracy'])

model_fit = model.fit(train_dataset,epochs=15,steps_per_epoch=10,validation_data=validation_dataset, validation_steps =10,verbose=1)

from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array

img = load_img('testing.jpg',target_size=(200,200))
plt.imshow(img)
plt.show()
XX = img_to_array(img)
XX = np.expand_dims(XX,axis=0)
images = np.vstack([XX])
val = model.predict(XX)

"""RECOGNIZING IMAGES 

"""

if(val[0][0]==1):
  print("50 limit sign")
elif val[0][1] == 1:
  print("No parking sign detected")
elif val[0][2] == 1:
  print("STOP sign detected")

val

